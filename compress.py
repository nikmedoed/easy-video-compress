import argparse
import concurrent.futures
import multiprocessing
import subprocess
from pathlib import Path


def compress_video(input_path: Path, output_path: Path, crf: int = 30, preset: str = "slow"):
    """–°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg."""
    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∂–∞—Ç–∏–µ: {input_path}")  # <-- –¥–æ–±–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    command = ["ffpb", "-i", str(input_path),
               "-c:v", "libx264", "-preset", preset, "-crf", str(crf),
               "-pix_fmt", "yuv420p", "-movflags", "faststart",
               "-c:a", "aac", "-b:a", "128k", str(output_path)]
    try:
        subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
        print(f"‚úÖ –°–∂–∞—Ç–æ: {input_path} -> {output_path}")
    except subprocess.CalledProcessError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: {input_path}")


def find_videos(input_path: Path):
    """–ò—â–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)."""
    video_extensions = {".mp4", ".mkv", ".avi", ".mov", ".flv", ".wmv", ".webm"}
    return [file for file in input_path.rglob("*") if file.suffix.lower() in video_extensions]


def main():
    parser = argparse.ArgumentParser(description="–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ FFmpeg")
    parser.add_argument("inputs", type=str, nargs='+', help="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–æ–∫ —Å –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º–∏")
    parser.add_argument("-o", "--output", type=str, default=None, help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∂–∞—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("-crf", type=int, default=30, help="–ü–∞—Ä–∞–º–µ—Ç—Ä CRF –¥–ª—è —Å–∂–∞—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)")
    parser.add_argument("-preset", type=str, default="slow", help="–ü—Ä–µ—Å–µ—Ç —Å–∂–∞—Ç–∏—è (fast, medium, slow –∏ —Ç.–¥.)")
    args = parser.parse_args()

    videos = []
    output_mapping = {}

    for input_path in args.inputs:
        path = Path(input_path)
        if path.is_file():
            output_path = path.with_name(f"{path.stem}_compressed.mp4")
            videos.append((path, output_path))
        elif path.is_dir():
            output_dir = path.parent / f"{path.name}_compressed"
            output_dir.mkdir(parents=True, exist_ok=True)
            for video in find_videos(path):
                output_path = output_dir / f"{video.stem}_compressed.mp4"
                videos.append((video, output_path))
        # if path.is_file():
        #     output_path = path.with_name(f"{path.stem}_compressed{path.suffix}")
        #     videos.append((path, output_path))
        # elif path.is_dir():
        #     output_dir = path.parent / f"{path.name}_compressed"
        #     output_dir.mkdir(parents=True, exist_ok=True)
        #     for video in find_videos(path):
        #         output_path = output_dir / video.name
        #         videos.append((video, output_path))
        else:
            print(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")

    if not videos:  # ‚Üê –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        print("üßê –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤.")
        return

    max_workers = max(1, min(int(multiprocessing.cpu_count() * 0.75) + 1, len(videos)))
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(compress_video, video, output, args.crf, args.preset) for video, output in videos]
        concurrent.futures.wait(futures)


if __name__ == "__main__":
    main()
